// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId // edit
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId // edit
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    isAdmin        Boolean          @default(false)
    image          String?
    accounts       Account[]
    sessions       Session[]
    Blueprints     Blueprints[]
    BlueprintPacks BlueprintPacks[]
    Mods           Mods[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tags {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    DisplayName String

    blueprintPacksId String?         @db.ObjectId
    blueprintsId     String?         @db.ObjectId
    modsId           String?         @db.ObjectId
    BlueprintPacks   BlueprintPacks? @relation(fields: [blueprintPacksId], references: [id])
    Blueprints       Blueprints?     @relation(fields: [blueprintsId], references: [id])
    Mods             Mods?           @relation(fields: [modsId], references: [id])
}

model Blueprints {
    id           String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    userId       String       @db.ObjectId
    name         String
    description  String
    mods         String[]
    rating       ratingType[]
    SCIMId       String?
    totalRating  Int
    totalVotes   Int
    designerSize String
    downloadIps  String[]
    downloads    Int
    images       String[]
    inPacks      String[]     @db.ObjectId
    tagIds       String[]     @db.ObjectId
    originalName String

    blueprintPacksId String? @db.ObjectId
    modsId           String? @db.ObjectId

    iconData       iconDataType
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    Tags           Tags[]
    BlueprintPacks BlueprintPacks? @relation(fields: [blueprintPacksId], references: [id])
    Mods           Mods?           @relation(fields: [modsId], references: [id])
}

model BlueprintPacks {
    id          String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    userId      String       @db.ObjectId
    blueprints  String[]     @db.ObjectId
    mods        String[]
    rating      ratingType[]
    totalRating Int
    totalVotes  Int
    downloadIps String[]
    downloads   Int
    tagIds      String[]     @db.ObjectId
    name        String
    description String

    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    Tags       Tags[]
    Blueprints Blueprints[]
}

model Mods {
    id               String   @id @default(auto()) @map("_id") @db.ObjectId
    logo             String
    modRef           String   @unique
    name             String
    shortDescription String
    views            Int
    downloads        Int
    hidden           Boolean
    sourceUrl        String
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    userId String? @db.ObjectId

    User       User?        @relation(fields: [userId], references: [id])
    Tags       Tags[]
    Blueprints Blueprints[]
}

type ratingType {
    userId String @db.ObjectId
    rating Int
}

type iconDataType {
    iconID Int
    color  colorDataType
}

type colorDataType {
    r Int
    g Int
    b Int
    a Int
}
